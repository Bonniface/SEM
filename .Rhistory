# Print the data frame with previous and abbreviated column names
# View(column_names)
# colnames(USAGE)
skimr::skim(USAGE)
# Calculate the missing value percentages for each column
missing_percentages <- colSums(is.na(USAGE)) / nrow(USAGE) * 100
# Identify columns with missing value percentages above 50%
columns_to_drop <- names(missing_percentages[missing_percentages > 50])
# Drop the columns from the data frame
USAGE <- USAGE[, !(names(USAGE) %in% columns_to_drop)]
library(ggplot2)
# Create a data frame with the column names and their corresponding missing value percentages
missing_data <- data.frame(
Column = colnames(USAGE),
Missing_Percentage = colSums(is.na(USAGE)) / nrow(USAGE) * 100
)
# Plot the missing value percentages
ggplot(missing_data, aes(x = reorder(Column, -Missing_Percentage), y = Missing_Percentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Column", y = "Missing Percentage") +
ggtitle("Missing Value Percentage in Each Column") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# library(summarytools)
#
# dfSummary(
#   USAGE,
#   varnumbers = FALSE,
#   round.digits = 2,
#   plain.ascii = FALSE,
#   style = "grid",
#   graph.magnif = .33,
#   valid.col = FALSE,
#   tmp.img.dir = "img"
# )
library(mice)
library(VIM)
library(DMwR2)
filled_data <- fillMissingValues(USAGE)
Data <- filled_data%>%
mutate_if(is.numeric, round)
library(dplyr)
# Calculate the percentage for each category
Individual_ratinng <- Data %>%
group_by(Iyhwyrts) %>%
tally() %>%
mutate(Percentage = n / nrow(filled_data) * 100,
ymax = cumsum(Percentage),
ymin = ifelse(is.na(lag(ymax)), 0, lag(ymax)))
# Load the necessary libraries
library(dplyr)
selected_columns <- Data%>%
select(Piyg, Hloe, Waye, Wiyar, TMRSietu)
library(ggplot2)
ggplot(selected_columns, aes(x = Hloe, fill = Waye)) +
geom_bar(position = position_dodge()) +
coord_flip() +
labs(x = "Education Level", y = "Proportion", fill = "Employment Status") +
# scale_fill_manual(values = c("Female" = "pink", "Male" = "lightblue")) +
theme_minimal()+
theme(
legend.title = element_text(hjust = 0.5, margin = margin(b = 10)),
legend.position = "bottom",
legend.direction = "horizontal"
) +
guides(fill = guide_legend(title.position = "top"))
library(apyramid)
pyramid <- selected_columns %>%
## ensure that age and gender are factors
mutate(Age_Group = factor(Wiyar, levels = c("50 years and above",
"40-49 years",
"30-39 years",
"21-29 years")),
Gender = factor(Piyg)) %>%
group_by(Age_Group, Gender, .groups = 'drop') %>%
## add the counts for each age group and gender together
summarise(population = sum(n())) %>%
## remove the grouping so we can calculate the overall proportion
ungroup() %>%
mutate(proportion = population / sum(population))
## plot pyramid
pyramid %>%
age_pyramid(
age_Group = "age_group",
split_by = "sex",
count = proportion,
proportional = TRUE) +
## only show the y axis label (otherwise repeated in all three plots)
labs(title = "Source population",
y = "",
x = "Age group (years)") +
## make the x axis the same for all plots
scale_y_continuous(breaks = breaks,
limits = limits,
labels = labels)
library(apyramid)
pyramid <- selected_columns %>%
## ensure that age and gender are factors
mutate(Age_Group = factor(Wiyar, levels = c("50 years and above",
"40-49 years",
"30-39 years",
"21-29 years")),
Gender = factor(Piyg)) %>%
group_by(Age_Group, Gender, .groups = 'drop') %>%
## add the counts for each age group and gender together
summarise(population = sum(n())) %>%
## remove the grouping so we can calculate the overall proportion
ungroup() %>%
mutate(proportion = population / sum(population))
## plot pyramid
pyramid %>%
age_pyramid(
Age_Group = "Age_Group",
split_by = "Gender",
count = proportion,
proportional = TRUE) +
## only show the y axis label (otherwise repeated in all three plots)
labs(title = "Source population",
y = "",
x = "Age group (years)") +
## make the x axis the same for all plots
scale_y_continuous(breaks = breaks,
limits = limits,
labels = labels)
pyramid
library(apyramid)
pyramid <- selected_columns %>%
## ensure that age and gender are factors
mutate(Age_Group = factor(Wiyar, levels = c("50 years and above",
"40-49 years",
"30-39 years",
"21-29 years")),
Gender = factor(Piyg)) %>%
group_by(Age_Group, Gender, .groups = 'drop') %>%
## add the counts for each age group and gender together
summarise(population = sum(n())) %>%
## remove the grouping so we can calculate the overall proportion
ungroup() %>%
mutate(proportion = population / sum(population))
## plot pyramid
pyramid %>%
age_pyramid(
age_group = "Age_Group",
split_by = "Gender",
count = proportion,
proportional = TRUE) +
## only show the y axis label (otherwise repeated in all three plots)
labs(title = "Source population",
y = "",
x = "Age group (years)") +
## make the x axis the same for all plots
scale_y_continuous(breaks = breaks,
limits = limits,
labels = labels)
library(apyramid)
pyramid <- selected_columns %>%
## ensure that age and gender are factors
mutate(Age_Group = factor(Wiyar, levels = c("50 years and above",
"40-49 years",
"30-39 years",
"21-29 years")),
Gender = factor(Piyg)) %>%
group_by(Age_Group, Gender, .groups = 'drop') %>%
## add the counts for each age group and gender together
summarise(population = sum(n())) %>%
## remove the grouping so we can calculate the overall proportion
ungroup() %>%
mutate(proportion = population / sum(population))
## plot pyramid
pyramid %>%
age_pyramid(
age_group = "Age_Group",
split_by = "Gender",
count = proportion,
proportional = TRUE)
## only show the y axis label (otherwise repeated in all three plots)
# labs(title = "Source population",
#      y = "",
#      x = "Age group (years)") +
# ## make the x axis the same for all plots
# scale_y_continuous(breaks = breaks,
#                    limits = limits,
#                    labels = labels)
## plot pyramid
pyramid %>%
age_pyramid(
age_group = "Age_Group",
split_by = "Gender",
count = proportion,
proportional = TRUE) +
theme_minimal()+
theme(
legend.title = element_text(hjust = 0.5, margin = margin(b = 10)),
legend.position = "bottom",
legend.direction = "horizontal"
) +
guides(fill = guide_legend(title.position = "top"))
## plot pyramid
pyramid %>%
age_pyramid(
age_group = "Age_Group",
split_by = "Gender",
count = proportion,
proportional = TRUE) +
scale_fill_manual(                             # specify colors AND labels
values = c("pink", "lightblue"),
labels = c("m" = "Male", "f" = "Female"))+
labs(y = "Percent of all cases",              # note x and y labs are switched
x = "Age categories",
fill = "Gender",
caption = "My data source and caption here",
title = "Title of my plot",
subtitle = "Subtitle with \n a second line...")+
theme_minimal()+
theme(
legend.title = element_text(hjust = 0.5, margin = margin(b = 10)),
legend.position = "bottom",
legend.direction = "horizontal"
) +
guides(fill = guide_legend(title.position = "top"))
install.packages("magick")
install.packages("magick")
## plot pyramid
pyramid %>%
age_pyramid(
age_group = "Age_Group",
split_by = "Gender",
count = proportion,
proportional = TRUE) +
scale_fill_manual(                             # specify colors AND labels
values = c("pink", "lightblue"),
labels = c("m" = "Male", "f" = "Female"))+
labs(y = "Percent of all cases",              # note x and y labs are switched
x = "Age categories",
fill = "Gender",
# caption = "",
title = "Gender of all Age Range",
subtitle = "What is your age range?")+
theme_minimal()+
theme(
legend.title = element_text(hjust = 0.5, margin = margin(b = 10)),
legend.position = "bottom",
legend.direction = "horizontal"
) +
guides(fill = guide_legend(title.position = "top"))
setwd("C:/Users/ALI ABDUL AZIZ MAIGA/Desktop/Boni")
library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
## load packages from CRAN
pacman::p_load(rio,          # File import
here,         # File locator
tidyverse,    # data management + ggplot2 graphics
tsibble,      # handle time series datasets
survey,       # for survey functions
srvyr,        # dplyr wrapper for survey package
gtsummary,    # wrapper for survey package to produce tables
apyramid,     # a package dedicated to creating age pyramids
patchwork,    # for combining ggplots
ggforce ,      # for alluvial/sankey plots
tinytex,
dplyr,
mice,
VIM,
DMwR2,
apyramid,
dplyr,
arsenal,
kableExtra,
ggplot2,
readxl,
DataExplorer
)
## load packages from github
pacman::p_load_gh(
"R4EPI/sitrep"          # for observation time / weighting functions
)
# Load the necessary libraries
knitr::opts_chunk$set(echo = TRUE)
## load packages from CRAN
pacman::p_load(rio,          # File import
here,         # File locator
tidyverse,    # data management + ggplot2 graphics
tsibble,      # handle time series datasets
survey,       # for survey functions
srvyr,        # dplyr wrapper for survey package
gtsummary,    # wrapper for survey package to produce tables
apyramid,     # a package dedicated to creating age pyramids
patchwork,    # for combining ggplots
ggforce ,      # for alluvial/sankey plots
tinytex,
dplyr,
mice,
VIM,
DMwR2,
apyramid,
dplyr,
arsenal,
kableExtra,
ggplot2,
readxl,
DataExplorer
)
## load packages from github
pacman::p_load_gh(
"R4EPI/sitrep"          # for observation time / weighting functions
)
# Load the necessary libraries
knitr::opts_chunk$set(echo = TRUE)
## load packages from CRAN
pacman::p_load(rio,          # File import
here,         # File locator
tidyverse,    # data management + ggplot2 graphics
tsibble,      # handle time series datasets
survey,       # for survey functions
srvyr,        # dplyr wrapper for survey package
gtsummary,    # wrapper for survey package to produce tables
apyramid,     # a package dedicated to creating age pyramids
patchwork,    # for combining ggplots
ggforce ,      # for alluvial/sankey plots
tinytex,
dplyr,
mice,
VIM,
DMwR2,
apyramid,
dplyr,
arsenal,
kableExtra,
ggplot2,
readxl,
DataExplorer
)
## load packages from github
pacman::p_load_gh(
"R4EPI/sitrep"          # for observation time / weighting functions
)
# Load the necessary libraries
knitr::opts_chunk$set(echo = TRUE)
## load packages from CRAN
pacman::p_load(rio,          # File import
here,         # File locator
tidyverse,    # data management + ggplot2 graphics
tsibble,      # handle time series datasets
survey,       # for survey functions
srvyr,        # dplyr wrapper for survey package
gtsummary,    # wrapper for survey package to produce tables
apyramid,     # a package dedicated to creating age pyramids
patchwork,    # for combining ggplots
ggforce ,      # for alluvial/sankey plots
tinytex,
dplyr,
mice,
VIM,
DMwR2,
apyramid,
dplyr,
arsenal,
kableExtra,
ggplot2,
readxl,
DataExplorer
)
## load packages from github
pacman::p_load_gh(
"R4EPI/sitrep"          # for observation time / weighting functions
)
# Load the necessary libraries
knitr::opts_chunk$set(echo = TRUE)
## load packages from CRAN
pacman::p_load(rio,          # File import
here,         # File locator
tidyverse,    # data management + ggplot2 graphics
tsibble,      # handle time series datasets
survey,       # for survey functions
srvyr,        # dplyr wrapper for survey package
gtsummary,    # wrapper for survey package to produce tables
apyramid,     # a package dedicated to creating age pyramids
patchwork,    # for combining ggplots
ggforce ,      # for alluvial/sankey plots
tinytex,
dplyr,
mice,
VIM,
DMwR2,
apyramid,
dplyr,
arsenal,
kableExtra,
ggplot2,
readxl,
DataExplorer
)
## load packages from github
pacman::p_load_gh(
"R4EPI/sitrep"          # for observation time / weighting functions
)
# Load the necessary libraries
USAGE <- read_excel("USAGE.xlsx")
USAGE_xlsx = USAGE
colnames(USAGE_xlsx)
introduce(USAGE)
plot_intro(USAGE)
source("functions.R")
# Call the function to abbreviate columns
USAGE <- abbreviate_df_columns(USAGE)
# Print the abbreviated column names
print(colnames(USAGE))
# Call the function to abbreviate columns
column_names <- abbreviate_columns(USAGE_xlsx)
# Print the data frame with previous and abbreviated column names
# View(column_names)
# colnames(USAGE)
# Calculate the missing value percentages for each column
missing_percentages <- colSums(is.na(USAGE)) / nrow(USAGE) * 100
# Identify columns with missing value percentages above 50%
columns_to_drop <- names(missing_percentages[missing_percentages > 50])
# Drop the columns from the data frame
USAGE <- USAGE[, !(names(USAGE) %in% columns_to_drop)]
# Create a data frame with the column names and their corresponding missing value percentages
missing_data <- data.frame(
Column = colnames(USAGE),
Missing_Percentage = colSums(is.na(USAGE)) / nrow(USAGE) * 100
)
# Plot the missing value percentages
ggplot(missing_data, aes(x = reorder(Column, -Missing_Percentage), y = Missing_Percentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Column", y = "Missing Percentage") +
ggtitle("Missing Value Percentage in Each Column") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# library(summarytools)
#
# dfSummary(
#   USAGE,
#   varnumbers = FALSE,
#   round.digits = 2,
#   plain.ascii = FALSE,
#   style = "grid",
#   graph.magnif = .33,
#   valid.col = FALSE,
#   tmp.img.dir = "img"
# )
filled_data <- fillMissingValues(USAGE)
Data <- filled_data%>%
mutate_if(is.numeric, round)
# Calculate the percentage for each category
Individual_ratinng <- Data %>%
group_by(Iyhwyrts) %>%
tally() %>%
mutate(Percentage = n / nrow(filled_data) * 100,
ymax = cumsum(Percentage),
ymin = ifelse(is.na(lag(ymax)), 0, lag(ymax)))
pyramid <- selected_columns %>%
## ensure that age and gender are factors
mutate(Age_Group = factor(Wiyar, levels = c("50 years and above",
"40-49 years",
"30-39 years",
"21-29 years")),
Gender = factor(Piyg)) %>%
group_by(Age_Group, Gender, .groups = 'drop') %>%
## add the counts for each age group and gender together
summarise(population = sum(n())) %>%
## remove the grouping so we can calculate the overall proportion
ungroup() %>%
mutate(proportion = population / sum(population))
## plot pyramid
pyramid %>%
age_pyramid(
age_group = "Age_Group",
split_by = "Gender",
count = proportion,
proportional = TRUE) +
scale_fill_manual(                             # specify colors AND labels
values = c("pink", "lightblue"),
labels = c("m" = "Male", "f" = "Female"))+
labs(y = "Percent of all cases",              # note x and y labs are switched
x = "Age categories",
fill = "Gender",
# caption = "",
title = "Gender of all Age Range",
subtitle = "What is your age range?")+
theme_minimal()+
theme(
legend.title = element_text(hjust = 0.5, margin = margin(b = 10)),
legend.position = "bottom",
legend.direction = "horizontal"
) +
guides(fill = guide_legend(title.position = "top"))
ggplot(data = Individual_ratinng )+
geom_rect(aes(ymin = ymin, ymax = ymax,fill = Iyhwyrts,
xmin= 2, xmax = 4))+
coord_polar(theta="y")+
theme_void()+
xlim(c(-1, 4))+
geom_text(aes(x = 3.5, y = Percentage ,label = paste0(Iyhwyrts,"\n",round(Percentage,1), "%")),
position = position_stack(vjust = 0.5), size = 2.5)+
labs(title    = "Individual Rating of the Mobile Renewal Service Of NHIS",
fill = "Ratting")+
labs(subtitle = "If yes, how will you rate the service?")
# Calculate the frequency of Piyg and Waye combinations
frequency <- selected_columns %>%
group_by(Piyg, Waye) %>%
tally()
# Bar plot
bar_plot <- ggplot(frequency, aes(x = Piyg, y = n, fill = Waye)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Distribution by Piyg and Waye",
x = "Gender",
y = "Frequency",
fill = "Employment Status")
# Display the plots
bar_plot
table1 <-  tableby(Iyhwyrts~Piyg +Hloe+Waye+Wiyar, data = USAGE)
summary(table1)
